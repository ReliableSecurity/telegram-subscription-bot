package handlers

import (
        "fmt"
        "math/rand"
        "os"
        "strconv"
        "strings"
        "time"

        tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
        "telegram-subscription-bot/database"
        "telegram-subscription-bot/locales"
        "telegram-subscription-bot/models"
        "telegram-subscription-bot/services"
)

type CommandHandler struct {
        bot                 *tgbotapi.BotAPI
        db                  *database.DB
        subscriptionService *services.SubscriptionService
        paymentService      *services.PaymentService
        userRepo            *models.UserRepository
        planRepo            *models.SubscriptionRepository
}

func NewCommandHandler(bot *tgbotapi.BotAPI, db *database.DB, subscriptionService *services.SubscriptionService, paymentService *services.PaymentService) *CommandHandler {
        return &CommandHandler{
                bot:                 bot,
                db:                  db,
                subscriptionService: subscriptionService,
                paymentService:      paymentService,
                userRepo:            models.NewUserRepository(db.DB),
                planRepo:            models.NewSubscriptionRepository(db.DB),
        }
}

func (h *CommandHandler) Handle(update tgbotapi.Update) {
        if update.Message == nil {
                return
        }

        user := h.ensureUser(update.Message.From)
        if user == nil {
                return
        }

        command := update.Message.Command()
        args := strings.Fields(update.Message.CommandArguments())

        switch command {
        case "start":
                h.handleStart(update, user)
        case "help":
                h.handleHelp(update, user)
        case "plans":
                h.handlePlans(update, user)
        case "myplan":
                h.handleMyPlan(update, user)
        case "subscribe":
                h.handleSubscribe(update, user, args)
        case "cancel":
                h.handleCancel(update, user)
        case "history":
                h.handleHistory(update, user)
        case "crypto":
                h.handleCrypto(update, user, args)
        case "setup":
                h.handleSetup(update, user)
        case "addbot":
                h.handleAddBot(update, user)
        case "id":
                h.handleID(update, user)
        case "violations":
                h.handleViolations(update, user)
        default:
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "unknown_command"))
        }
}

func (h *CommandHandler) HandleCallback(update tgbotapi.Update) {
        if update.CallbackQuery == nil {
                return
        }

        user := h.ensureUser(update.CallbackQuery.From)
        if user == nil {
                return
        }

        data := update.CallbackQuery.Data
        parts := strings.Split(data, ":")

        switch parts[0] {
        case "show_plans":
                h.handlePlansCallback(update, user)
        case "my_plan":
                h.handleMyPlanCallback(update, user)
        case "payment_history":
                h.handleHistoryCallback(update, user)
        case "my_account":
                h.handleMyAccountCallback(update, user)
        case "setup_guide":
                h.handleSetupCallback(update, user)
        case "manage_groups":
                h.handleManageGroupsCallback(update, user)
        case "help_menu":
                h.handleHelpCallback(update, user)
        case "subscribe":
                if len(parts) > 1 {
                        planID, _ := strconv.Atoi(parts[1])
                        h.handleSubscribeCallback(update, user, planID)
                }
        case "pay_card":
                if len(parts) > 1 {
                        planID, _ := strconv.Atoi(parts[1])
                        h.handleCardPayment(update, user, planID)
                }
        case "pay_crypto":
                if len(parts) > 1 {
                        planID, _ := strconv.Atoi(parts[1])
                        h.handleCryptoPayment(update, user, planID)
                }
        case "back_to_menu":
                h.handleBackToMenu(update, user)
        case "change_password":
                h.handleChangePasswordCallback(update, user)
        case "change_username":
                h.handleChangeUsernameCallback(update, user)
        }

        // Answer callback query
        callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
        h.bot.Send(callback)
}

func (h *CommandHandler) handleStart(update tgbotapi.Update, user *models.User) {
        message := locales.GetMessage(user.LanguageCode, "welcome")
        
        // Create main menu keyboard
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üíé –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫", "show_plans"),
                        tgbotapi.NewInlineKeyboardButtonData("üìä –ú–æ–π –ø–ª–∞–Ω", "my_plan"),
                ),
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", "payment_history"),
                        tgbotapi.NewInlineKeyboardButtonData("üîó –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "my_account"),
                ),
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", "manage_groups"),
                        tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleHelp(update tgbotapi.Update, user *models.User) {
        message := locales.GetMessage(user.LanguageCode, "help")
        h.sendMessage(update.Message.Chat.ID, message)
}

func (h *CommandHandler) handlePlans(update tgbotapi.Update, user *models.User) {
        plans, err := h.planRepo.GetAll()
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }

        message := locales.GetMessage(user.LanguageCode, "available_plans") + "\n\n"
        
        var keyboard [][]tgbotapi.InlineKeyboardButton
        
        for _, plan := range plans {
                price := fmt.Sprintf("%.2f USD", float64(plan.PriceCents)/100)
                if plan.PriceCents == 0 {
                        price = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
                }
                
                // Display simple plan info
                planText := fmt.Sprintf("üíé %s - %s", plan.Name, price)
                if plan.Name == "Basic" {
                        planText += " (1 –º–µ—Å—è—Ü)"
                } else if plan.Name == "Pro" {
                        planText += " (3 –º–µ—Å—è—Ü–∞)"
                } else if plan.Name == "Premium" {
                        planText += " (1 –≥–æ–¥)"
                }
                
                message += planText + "\n"
                
                subscribeBtn := tgbotapi.NewInlineKeyboardButtonData(
                        fmt.Sprintf("üíé %s - %s", plan.Name, price),
                        fmt.Sprintf("subscribe:%d", plan.ID),
                )
                keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{subscribeBtn})
        }
        
        msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
        if len(keyboard) > 0 {
                msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
        }
        h.bot.Send(msg)
}

func (h *CommandHandler) handleMyPlan(update tgbotapi.Update, user *models.User) {
        plan, err := h.planRepo.GetByID(user.CurrentPlanID)
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }

        message := fmt.Sprintf("%s: %s\n", locales.GetMessage(user.LanguageCode, "current_plan"), plan.Name)
        
        if user.PlanExpiresAt != nil {
                message += fmt.Sprintf("%s: %s\n", locales.GetMessage(user.LanguageCode, "expires_at"), user.PlanExpiresAt.Format("2006-01-02 15:04:05"))
                
                if user.PlanExpiresAt.Before(time.Now()) {
                        message += "\n‚ö†Ô∏è " + locales.GetMessage(user.LanguageCode, "plan_expired")
                }
        }
        
        message += fmt.Sprintf("\n%s: %d", locales.GetMessage(user.LanguageCode, "max_groups"), plan.MaxGroups)
        
        h.sendMessage(update.Message.Chat.ID, message)
}

func (h *CommandHandler) handleSubscribe(update tgbotapi.Update, user *models.User, args []string) {
        if len(args) == 0 {
                h.handlePlans(update, user)
                return
        }
        
        planID, err := strconv.Atoi(args[0])
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "invalid_plan_id"))
                return
        }
        
        h.handleSubscribePlan(update, user, planID)
}

func (h *CommandHandler) handleSubscribePlan(update tgbotapi.Update, user *models.User, planID int) {
        plan, err := h.planRepo.GetByID(planID)
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "plan_not_found"))
                return
        }

        if plan.PriceCents == 0 {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "free_plan_no_payment"))
                return
        }

        // Create payment options
        message := fmt.Sprintf("%s %s\n\n", locales.GetMessage(user.LanguageCode, "payment_options"), plan.Name)
        message += fmt.Sprintf("%s: %.2f %s\n", locales.GetMessage(user.LanguageCode, "price"), float64(plan.PriceCents)/100, plan.Currency)
        
        var keyboard [][]tgbotapi.InlineKeyboardButton
        
        // Card payment button
        cardBtn := tgbotapi.NewInlineKeyboardButtonData(
                "üí≥ "+locales.GetMessage(user.LanguageCode, "pay_with_card"),
                fmt.Sprintf("subscribe:%d", planID),
        )
        keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{cardBtn})
        
        // Crypto payment buttons
        cryptoRow := []tgbotapi.InlineKeyboardButton{
                tgbotapi.NewInlineKeyboardButtonData("‚Çø Bitcoin", fmt.Sprintf("crypto_pay:%d:BTC", planID)),
                tgbotapi.NewInlineKeyboardButtonData("Œû Ethereum", fmt.Sprintf("crypto_pay:%d:ETH", planID)),
                tgbotapi.NewInlineKeyboardButtonData("‚ÇÆ USDT", fmt.Sprintf("crypto_pay:%d:USDT", planID)),
        }
        keyboard = append(keyboard, cryptoRow)
        
        var chatID int64
        if update.Message != nil {
                chatID = update.Message.Chat.ID
        } else if update.CallbackQuery != nil {
                chatID = update.CallbackQuery.Message.Chat.ID
        }
        
        msg := tgbotapi.NewMessage(chatID, message)
        msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
        h.bot.Send(msg)
}

func (h *CommandHandler) handleCancel(update tgbotapi.Update, user *models.User) {
        // Reset user to free plan
        err := h.userRepo.UpdateSubscription(user.ID, 1, nil)
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }
        
        h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "subscription_cancelled"))
}

func (h *CommandHandler) handleHistory(update tgbotapi.Update, user *models.User) {
        paymentRepo := models.NewPaymentRepository(h.db.DB)
        payments, err := paymentRepo.GetByUserID(int64(user.ID))
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }
        
        if len(payments) == 0 {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "no_payment_history"))
                return
        }
        
        message := locales.GetMessage(user.LanguageCode, "payment_history") + "\n\n"
        
        for _, payment := range payments {
                status := payment.Status
                if status == "completed" {
                        status = "‚úÖ " + locales.GetMessage(user.LanguageCode, "completed")
                } else if status == "pending" {
                        status = "‚è≥ " + locales.GetMessage(user.LanguageCode, "pending")
                } else if status == "failed" {
                        status = "‚ùå " + locales.GetMessage(user.LanguageCode, "failed")
                }
                
                message += fmt.Sprintf("üí∞ %.2f %s - %s\n", float64(payment.Amount)/100, payment.Currency, status)
                message += fmt.Sprintf("üìÖ %s\n", payment.CreatedAt.Format("2006-01-02 15:04:05"))
                message += fmt.Sprintf("üí≥ %s\n\n", payment.PaymentMethod)
        }
        
        h.sendMessage(update.Message.Chat.ID, message)
}

func (h *CommandHandler) handleCrypto(update tgbotapi.Update, user *models.User, args []string) {
        if len(args) < 2 {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "crypto_usage"))
                return
        }
        
        planID, err := strconv.Atoi(args[0])
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "invalid_plan_id"))
                return
        }
        
        currency := strings.ToUpper(args[1])
        h.handleCryptoPay(update, user, planID, currency)
}

func (h *CommandHandler) handleCryptoPay(update tgbotapi.Update, user *models.User, planID int, currency string) {
        _, err := h.planRepo.GetByID(planID)
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "plan_not_found"))
                return
        }

        _, err = h.paymentService.CreateCryptoPayment(user.ID, planID, currency)
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }

        message := fmt.Sprintf("%s %s\n\n", locales.GetMessage(user.LanguageCode, "crypto_payment_instructions"), currency)
        message += fmt.Sprintf("%s: `%s`\n", locales.GetMessage(user.LanguageCode, "address"), "Address from description")
        message += fmt.Sprintf("%s: `%s`\n", locales.GetMessage(user.LanguageCode, "amount"), "Amount from description")
        message += fmt.Sprintf("\n%s", locales.GetMessage(user.LanguageCode, "crypto_payment_note"))
        
        var chatID int64
        if update.Message != nil {
                chatID = update.Message.Chat.ID
        } else if update.CallbackQuery != nil {
                chatID = update.CallbackQuery.Message.Chat.ID
        }
        
        msg := tgbotapi.NewMessage(chatID, message)
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

func (h *CommandHandler) ensureUser(from *tgbotapi.User) *models.User {
        user, err := h.userRepo.GetByTelegramID(from.ID)
        if err != nil {
                // Create new user
                user = &models.User{
                        TelegramID:    from.ID,
                        Username:      from.UserName,
                        FirstName:     from.FirstName,
                        LastName:      from.LastName,
                        LanguageCode:  from.LanguageCode,
                        CurrentPlanID: 1, // Basic plan
                }
                
                if err := h.userRepo.CreateOrUpdate(user); err != nil {
                        return nil
                }
        }
        
        return user
}

func (h *CommandHandler) handleID(update tgbotapi.Update, user *models.User) {
        chatID := update.Message.Chat.ID
        chatType := update.Message.Chat.Type
        
        var message string
        if chatType == "private" {
                message = fmt.Sprintf("üÜî **ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞:** `%d`\n\n", chatID)
                message += "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ —Å–∞–º–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ"
        } else {
                groupName := update.Message.Chat.Title
                if groupName == "" {
                        groupName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞"
                }
                
                message = fmt.Sprintf("üÜî **ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞:** `%d`\n", chatID)
                message += fmt.Sprintf("üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** %s\n", groupName)
                message += fmt.Sprintf("üîß **–¢–∏–ø:** %s\n\n", chatType)
                message += "üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"
        }
        
        msg := tgbotapi.NewMessage(chatID, message)
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

func (h *CommandHandler) ensureWebAccount(user *models.User) {
        if user.WebUsername != "" {
                return
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç–∞
        username := h.generateRandomUsername()
        password := h.generateRandomPassword()
        
        err := h.userRepo.UpdateWebCredentials(user.ID, username, password)
        if err != nil {
                return
        }
        
        user.WebUsername = username
        user.WebPassword = password
        user.IsWebActive = true
}

func (h *CommandHandler) generateUserToken(user *models.User) string {
        return fmt.Sprintf("user_%d_%s", user.ID, h.generateRandomPassword()[:32])
}

func (h *CommandHandler) sendMessage(chatID int64, text string) {
        msg := tgbotapi.NewMessage(chatID, text)
        h.bot.Send(msg)
}

func (h *CommandHandler) handleViolations(update tgbotapi.Update, user *models.User) {
        // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
        if update.Message.Chat.Type == "private" {
                h.sendMessage(update.Message.Chat.ID, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
                return
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        query := `
                SELECT v.id, v.user_id, v.chat_id, v.violation_type, v.violation_reason, 
                       v.message_text, v.created_at, v.expires_at, v.is_active,
                       u.username, u.first_name
                FROM user_violations v
                JOIN users u ON v.user_id = u.id
                WHERE v.chat_id = $1 AND v.is_active = TRUE
                ORDER BY v.created_at DESC
                LIMIT 20
        `
        
        rows, err := h.db.DB.Query(query, update.Message.Chat.ID)
        if err != nil {
                h.sendMessage(update.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö")
                return
        }
        defer rows.Close()
        
        var violations []string
        warnings := 0
        tempBans := 0
        permanentBans := 0
        
        for rows.Next() {
                var id, userID int
                var chatID int64
                var violationType, violationReason, messageText, username, firstName string
                var createdAt time.Time
                var expiresAt *time.Time
                var isActive bool
                
                err := rows.Scan(&id, &userID, &chatID, &violationType, &violationReason,
                        &messageText, &createdAt, &expiresAt, &isActive, &username, &firstName)
                if err != nil {
                        continue
                }
                
                // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                switch violationType {
                case "warning":
                        warnings++
                case "temp_ban":
                        tempBans++
                case "permanent_ban":
                        permanentBans++
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                displayName := firstName
                if username != "" {
                        displayName = "@" + username
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                var icon string
                switch violationType {
                case "warning":
                        icon = "‚ö†Ô∏è"
                case "temp_ban":
                        icon = "üö´"
                case "permanent_ban":
                        icon = "üîí"
                }
                
                violationText := fmt.Sprintf("%s %s - %s (%s)", 
                        icon, displayName, violationReason, createdAt.Format("02.01.2006"))
                violations = append(violations, violationText)
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        var message strings.Builder
        message.WriteString("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ**\n\n")
        message.WriteString(fmt.Sprintf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: %d\n", warnings))
        message.WriteString(fmt.Sprintf("üö´ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–Ω—ã: %d\n", tempBans))
        message.WriteString(fmt.Sprintf("üîí –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –±–∞–Ω—ã: %d\n\n", permanentBans))
        
        if len(violations) == 0 {
                message.WriteString("‚úÖ –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        } else {
                message.WriteString("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è:**\n")
                for _, violation := range violations {
                        message.WriteString(violation + "\n")
                }
                
                if len(violations) == 20 {
                        message.WriteString("\n... –∏ –¥—Ä—É–≥–∏–µ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20)")
                }
        }
        
        msg := tgbotapi.NewMessage(update.Message.Chat.ID, message.String())
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

func (h *CommandHandler) handleSetup(update tgbotapi.Update, user *models.User) {
        message := "üîß **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞**\n\n"
        message += "**–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞**\n"
        message += "1. –ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram\n"
        message += "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot\n"
        message += "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞\n"
        message += "4. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n\n"
        
        message += "**–®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã**\n"
        message += "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
        message += "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        message += "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
        
        message += "**–®–∞–≥ 3: –í–µ–±-–ø–∞–Ω–µ–ª—å**\n"
        message += "1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        message += "2. –í–æ–π–¥–∏—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏: admin / admin123\n"
        message += "3. –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n\n"
        
        message += "**–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        message += "/addbot - –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É\n"
        message += "/plans - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã\n"
        message += "/help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        
        msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

func (h *CommandHandler) handleAddBot(update tgbotapi.Update, user *models.User) {
        message := "ü§ñ **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª**\n\n"
        message += "**–î–ª—è –≥—Ä—É–ø–ø:**\n"
        message += "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É\n"
        message += "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
        message += "3. –í—ã–±–µ—Ä–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\"\n"
        message += "4. –ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        message += "5. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        
        message += "**–î–ª—è –∫–∞–Ω–∞–ª–æ–≤:**\n"
        message += "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª\n"
        message += "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
        message += "3. –í—ã–±–µ—Ä–∏—Ç–µ \"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\"\n"
        message += "4. –ù–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\"\n"
        message += "5. –ù–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞\n"
        message += "6. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        
        message += "**–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞:**\n"
        message += "‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        message += "‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        message += "‚úÖ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        message += "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
        
        message += "**–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
        message += "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        message += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        message += "‚Ä¢ –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞\n"
        message += "‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã\n"
        message += "‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
        
        message += "**–¢–∞—Ä–∏—Ñ—ã:**\n"
        message += "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω: 1 –≥—Ä—É–ø–ø–∞\n"
        message += "‚Ä¢ Premium: 5 –≥—Ä—É–ø–ø ($5/–º–µ—Å—è—Ü)\n"
        message += "‚Ä¢ Pro: 20 –≥—Ä—É–ø–ø ($10/–º–µ—Å—è—Ü)\n\n"
        
        message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plans –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –æ–ø–ª–∞—Ç—ã."
        
        msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

// Button-based callback handlers
func (h *CommandHandler) handlePlansCallback(update tgbotapi.Update, user *models.User) {
        plans, err := h.planRepo.GetAll()
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }

        message := "üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:\n\n"
        var keyboard [][]tgbotapi.InlineKeyboardButton
        
        // Group plans by type to avoid duplicates
        seenPlans := make(map[string]bool)
        
        for _, plan := range plans {
                if plan.PriceCents == 0 {
                        continue
                }
                
                planKey := fmt.Sprintf("%s_%d_%d", plan.Name, plan.PriceCents, plan.DurationDays)
                if seenPlans[planKey] {
                        continue
                }
                seenPlans[planKey] = true
                
                price := fmt.Sprintf("%.2f %s", float64(plan.PriceCents)/100, plan.Currency)
                
                subscribeBtn := tgbotapi.NewInlineKeyboardButtonData(
                        fmt.Sprintf("üíé %s - %s", plan.Name, price),
                        fmt.Sprintf("subscribe:%d", plan.ID),
                )
                keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{subscribeBtn})
        }
        
        backBtn := tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu")
        keyboard = append(keyboard, []tgbotapi.InlineKeyboardButton{backBtn})
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
        h.bot.Send(msg)
}

func (h *CommandHandler) handleMyPlanCallback(update tgbotapi.Update, user *models.User) {
        plan, err := h.planRepo.GetByID(user.CurrentPlanID)
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "error_occurred"))
                return
        }

        message := fmt.Sprintf("üìä –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: %s\n", plan.Name)
        if user.PlanExpiresAt != nil {
                message += fmt.Sprintf("üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: %s\n", user.PlanExpiresAt.Format("2006-01-02"))
        }
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üíé –£–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω", "show_plans"),
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleHistoryCallback(update tgbotapi.Update, user *models.User) {
        // Get payments for user - simple implementation
        payments := []models.Payment{} // Empty for now
        err := error(nil)
        if err != nil || len(payments) == 0 {
                message := "üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞"
                keyboard := tgbotapi.NewInlineKeyboardMarkup(
                        tgbotapi.NewInlineKeyboardRow(
                                tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                        ),
                )
                msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
                msg.ReplyMarkup = keyboard
                h.bot.Send(msg)
                return
        }

        message := "üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
        message += "–ü–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π\n"
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleMyAccountCallback(update tgbotapi.Update, user *models.User) {
        var username, password string
        
        // Check if user already has web account
        if user.WebUsername != "" && user.IsWebActive {
                username = user.WebUsername
                password = user.WebPassword
        } else {
                // Create new web account with random credentials
                username = h.generateRandomUsername()
                password = h.generateRandomPassword()
                
                // Save to database
                err := h.userRepo.CreateWebAccount(user.ID, username, password)
                if err != nil {
                        h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
                        return
                }
        }
        
        // Get website URL and generate token
        websiteURL := "http://localhost:5000"
        if domain := os.Getenv("REPLIT_DOMAIN"); domain != "" {
                websiteURL = fmt.Sprintf("https://%s", domain)
        }
        
        // Generate user token for URL
        userToken := h.generateUserToken(user)
        dashboardURL := fmt.Sprintf("%s/user-dashboard?token=%s", websiteURL, userToken)
        
        message := "üîó **–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
        message += fmt.Sprintf("üåê –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞: `%s`\n\n", dashboardURL)
        message += "üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n"
        message += fmt.Sprintf("üë§ –õ–æ–≥–∏–Ω: `%s`\n", username)
        message += fmt.Sprintf("üîë –ü–∞—Ä–æ–ª—å: `%s`\n\n", password)
        message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ!** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ.\n\n"
        message += "–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:\n"
        message += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        message += "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        message += "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n"
        message += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", "change_password"),
                        tgbotapi.NewInlineKeyboardButtonData("üë§ –°–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω", "change_username"),
                ),
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

func (h *CommandHandler) handleSetupCallback(update tgbotapi.Update, user *models.User) {
        message := "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞:\n\n"
        message += "1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ @BotFather\n"
        message += "2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω\n"
        message += "3. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª\n"
        message += "4. –î–æ–±–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—ã\n"
        message += "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–∞–≤–∞\n\n"
        message += "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: /setup"
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleManageGroupsCallback(update tgbotapi.Update, user *models.User) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–µ–±-–∞–∫–∫–∞—É–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.WebUsername == "" {
                h.ensureWebAccount(user)
        }
        
        message := "üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏**\n\n"
        message += "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏:\n"
        message += fmt.Sprintf("`http://localhost:5000/groups?token=%s`\n\n", h.generateUserToken(user))
        message += "–í –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message += "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã\n"
        message += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø\n"
        message += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é\n"
        message += "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
        message += "üìù **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É:**\n"
        message += "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: @jnhghyjuiokmuhbgbot\n"
        message += "2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        message += "3. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ: `/id`\n"
        message += "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ParseMode = "Markdown"
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleHelpCallback(update tgbotapi.Update, user *models.User) {
        message := "‚ùì –ü–æ–º–æ—â—å:\n\n"
        message += "üíé –ü–ª–∞–Ω—ã - —Ç–∞—Ä–∏—Ñ—ã –ø–æ–¥–ø–∏—Å–æ–∫\n"
        message += "üìä –ú–æ–π –ø–ª–∞–Ω - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        message += "üí∞ –ò—Å—Ç–æ—Ä–∏—è - –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏\n"
        message += "üîó –ê–∫–∫–∞—É–Ω—Ç - –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        message += "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ - –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n"
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "back_to_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleSubscribeCallback(update tgbotapi.Update, user *models.User, planID int) {
        plan, err := h.planRepo.GetByID(planID)
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "plan_not_found"))
                return
        }

        message := fmt.Sprintf("üíé %s\n", plan.Name)
        message += fmt.Sprintf("üí∞ –¶–µ–Ω–∞: %.2f %s\n", float64(plan.PriceCents)/100, plan.Currency)
        message += fmt.Sprintf("‚è∞ –ù–∞ %d –¥–Ω–µ–π\n", plan.DurationDays)
        message += fmt.Sprintf("üë• –î–æ %d –≥—Ä—É–ø–ø\n\n", plan.MaxGroups)
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"

        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üí≥ –ö–∞—Ä—Ç–∞", fmt.Sprintf("pay_card:%d", planID)),
                        tgbotapi.NewInlineKeyboardButtonData("‚Çø –ö—Ä–∏–ø—Ç–æ", fmt.Sprintf("pay_crypto:%d", planID)),
                ),
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "show_plans"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) handleCardPayment(update tgbotapi.Update, user *models.User, planID int) {
        plan, err := h.planRepo.GetByID(planID)
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "plan_not_found"))
                return
        }

        invoice := tgbotapi.NewInvoice(
                update.CallbackQuery.Message.Chat.ID,
                fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ %s", plan.Name),
                fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %d –¥–Ω–µ–π", plan.DurationDays),
                fmt.Sprintf("plan_%d", planID),
                "XTR",
                "XTR",
                "test-token",
                []tgbotapi.LabeledPrice{
                        {Label: plan.Name, Amount: plan.PriceCents},
                },
        )
        
        h.bot.Send(invoice)
}

func (h *CommandHandler) handleCryptoPayment(update tgbotapi.Update, user *models.User, planID int) {
        plan, err := h.planRepo.GetByID(planID)
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, locales.GetMessage(user.LanguageCode, "plan_not_found"))
                return
        }

        message := fmt.Sprintf("‚Çø –ö—Ä–∏–ø—Ç–æ –æ–ø–ª–∞—Ç–∞\n\n")
        message += fmt.Sprintf("üíé –ü–ª–∞–Ω: %s\n", plan.Name)
        message += fmt.Sprintf("üí∞ –°—É–º–º–∞: %.2f USD\n\n", float64(plan.PriceCents)/100)
        message += "BTC: `1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa`\n"
        message += "ETH: `0x742d35Cc6634C0532925a3b8D41234567890`\n"
        message += "USDT: `TQKHhV5A1234567890abcdefghijklmnopqrst`\n\n"
        message += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."

        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", fmt.Sprintf("subscribe:%d", planID)),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ParseMode = "Markdown"
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) sendCallbackMessage(chatID int64, text string) {
        msg := tgbotapi.NewMessage(chatID, text)
        h.bot.Send(msg)
}

func (h *CommandHandler) handleBackToMenu(update tgbotapi.Update, user *models.User) {
        message := locales.GetMessage(user.LanguageCode, "welcome")
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üíé –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫", "show_plans"),
                        tgbotapi.NewInlineKeyboardButtonData("üìä –ú–æ–π –ø–ª–∞–Ω", "my_plan"),
                ),
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", "payment_history"),
                        tgbotapi.NewInlineKeyboardButtonData("üîó –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç", "my_account"),
                ),
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞", "setup_guide"),
                        tgbotapi.NewInlineKeyboardButtonData("‚ùì –ü–æ–º–æ—â—å", "help_menu"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        h.bot.Send(msg)
}

func (h *CommandHandler) generateRandomPassword() string {
        rand.Seed(time.Now().UnixNano())
        chars := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        password := make([]byte, 12)
        for i := range password {
                password[i] = chars[rand.Intn(len(chars))]
        }
        return string(password)
}

func getDomainURL() string {
        // Check if running on Replit
        if replit_url := os.Getenv("REPLIT_URL"); replit_url != "" {
                return replit_url
        }
        return "http://localhost:5000"
}

// Helper function for generating random usernames
func (h *CommandHandler) generateRandomUsername() string {
        // Generate truly unique username with timestamp
        timestamp := time.Now().UnixNano() / 1000000 // milliseconds
        randNum := rand.Intn(999) + 100
        
        prefixes := []string{"user", "member", "client", "guest", "player", "viewer", "person", "account", "profile", "visitor"}
        prefix := prefixes[rand.Intn(len(prefixes))]
        
        return fmt.Sprintf("%s_%d_%d", prefix, timestamp, randNum)
}

func (h *CommandHandler) handleChangePasswordCallback(update tgbotapi.Update, user *models.User) {
        newPassword := h.generateRandomPassword()
        
        err := h.userRepo.UpdateWebPassword(user.ID, newPassword)
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è")
                return
        }
        
        message := "üîë **–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
        message += fmt.Sprintf("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: `%s`\n\n", newPassword)
        message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ!** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ."
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "my_account"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}

func (h *CommandHandler) handleChangeUsernameCallback(update tgbotapi.Update, user *models.User) {
        newUsername := h.generateRandomUsername()
        
        err := h.userRepo.UpdateWebUsername(user.ID, newUsername)
        if err != nil {
                h.sendCallbackMessage(update.CallbackQuery.Message.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–≥–∏–Ω–∞")
                return
        }
        
        message := "üë§ **–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
        message += fmt.Sprintf("–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω: `%s`\n\n", newUsername)
        message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ!** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç."
        
        keyboard := tgbotapi.NewInlineKeyboardMarkup(
                tgbotapi.NewInlineKeyboardRow(
                        tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "my_account"),
                ),
        )
        
        msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message)
        msg.ReplyMarkup = keyboard
        msg.ParseMode = "Markdown"
        h.bot.Send(msg)
}
